import { DatalistEmits, DatalistProps } from './types';
import { VNode } from 'vue';
import { StringUnkownRecord } from '../../pkg/types/types';
declare const _default: <TApi extends Record<string, Function>, TReq extends Record<string, unknown>, TRecord extends Record<string, unknown>, TFiltersReq extends Record<string, unknown> | undefined = undefined, TApiResponse extends Record<string, unknown> | undefined = undefined, TFormSectionsRequest extends Record<string, unknown> | undefined = undefined>(__VLS_props: NonNullable<Awaited<typeof __VLS_setup>>["props"], __VLS_ctx?: __VLS_PrettifyLocal<Pick<NonNullable<Awaited<typeof __VLS_setup>>, "attrs" | "emit" | "slots">>, __VLS_expose?: NonNullable<Awaited<typeof __VLS_setup>>["expose"], __VLS_setup?: Promise<{
    props: __VLS_PrettifyLocal<Pick<Partial<{}> & Omit<{
        readonly [x: `on${Capitalize<any>}`]: ((...args: any) => any) | undefined;
    } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps, never>, `on${Capitalize<any>}`> & DatalistProps<TApi, TReq, TRecord, TFiltersReq, TApiResponse, TFormSectionsRequest> & Partial<{}>> & import('vue').PublicProps;
    expose(exposed: import('vue').ShallowUnwrapRef<{}>): void;
    attrs: any;
    slots: Readonly<{
        card?: ((props: {
            data: TRecord;
        }) => VNode | VNode[]) | undefined;
        cardStart?: ((props: {
            data: TRecord;
        }) => VNode | VNode[]) | undefined;
        cardEnd?: ((props: {
            data: TRecord;
        }) => VNode | VNode[]) | undefined;
        expansion?: ((props: {
            data: TRecord;
        }) => VNode[] | VNode) | undefined;
        globalActions?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode) | undefined;
        globalActionsStartPrepend?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode) | undefined;
        globalActionsStartAppend?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode) | undefined;
        globalActionsEndPrepend?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode) | undefined;
        globalActionsEndAppend?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode) | undefined;
        loading?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode) | undefined;
        paginatorcontainer?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode) | undefined;
        paginatorstart?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode) | undefined;
        paginatorend?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode) | undefined;
        empty?: () => VNode | VNode[];
        filtersPanel?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode) | undefined;
        filtersPresist?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode) | undefined;
        filtersReset?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode) | undefined;
        filtersForm?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode) | undefined;
        filtersFormAppend?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode) | undefined;
        filtersFormPrepend?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode) | undefined;
        header?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode) | undefined;
        dropdownActions?: ((props: {
            data: TRecord;
        }) => VNode[] | VNode) | undefined;
        actions?: ((props: {
            data: TRecord;
        }) => VNode[] | VNode) | undefined;
        actionsPrepend?: ((props: {
            data: TRecord;
        }) => VNode[] | VNode) | undefined;
        actionsAppend?: ((props: {
            data: TRecord;
        }) => VNode[] | VNode) | undefined;
    } & { [K in keyof TRecord as K extends string ? `column.${K}` : never]: (props: {
        store: import('pinia').Store<string, Pick<{
            filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
            datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
            filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
            currenData: import('vue').ComputedRef<TRecord[]>;
            globalFilters: string[];
            datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
            filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
            deleteRestoreOpenDialog: (params?: {
                record?: TRecord | undefined;
                isHardDelete?: boolean;
            } | undefined) => void;
            modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
            isFiltersFormValid: import('vue').ComputedRef<boolean>;
            viewRecord: (record: TRecord) => void;
            filtersFormStore: import('pinia').Store<string, Pick<{
                initialFormValue: StringUnkownRecord;
                setFormValue: (value: StringUnkownRecord) => Promise<void>;
                formValue: import('vue').ComputedRef<StringUnkownRecord>;
                presistForm: () => void;
                formValueString: import('vue').ComputedRef<string>;
                clearInput: (inputName: string) => Promise<void>;
                activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                refetchDropdownInput: (inputName: string) => Promise<void>;
                setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                resetForm: () => void;
                formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                clearForm: () => void;
                formOptions: import('../../pkg/types/types').AppFormOptions;
            }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                initialFormValue: StringUnkownRecord;
                setFormValue: (value: StringUnkownRecord) => Promise<void>;
                formValue: import('vue').ComputedRef<StringUnkownRecord>;
                presistForm: () => void;
                formValueString: import('vue').ComputedRef<string>;
                clearInput: (inputName: string) => Promise<void>;
                activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                refetchDropdownInput: (inputName: string) => Promise<void>;
                setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                resetForm: () => void;
                formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                clearForm: () => void;
                formOptions: import('../../pkg/types/types').AppFormOptions;
            }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                initialFormValue: StringUnkownRecord;
                setFormValue: (value: StringUnkownRecord) => Promise<void>;
                formValue: import('vue').ComputedRef<StringUnkownRecord>;
                presistForm: () => void;
                formValueString: import('vue').ComputedRef<string>;
                clearInput: (inputName: string) => Promise<void>;
                activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                refetchDropdownInput: (inputName: string) => Promise<void>;
                setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                resetForm: () => void;
                formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                clearForm: () => void;
                formOptions: import('../../pkg/types/types').AppFormOptions;
            }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
            createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
            isShowDeletedRef: import('vue').Ref<boolean, boolean>;
            debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
            permittedActions: import('vue').ComputedRef<{
                rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
            }>;
            optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
            deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
            filtersFormKey: string;
            dialogRef: unknown;
            init: () => Promise<void>;
        }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
            filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
            datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
            filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
            currenData: import('vue').ComputedRef<TRecord[]>;
            globalFilters: string[];
            datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
            filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
            deleteRestoreOpenDialog: (params?: {
                record?: TRecord | undefined;
                isHardDelete?: boolean;
            } | undefined) => void;
            modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
            isFiltersFormValid: import('vue').ComputedRef<boolean>;
            viewRecord: (record: TRecord) => void;
            filtersFormStore: import('pinia').Store<string, Pick<{
                initialFormValue: StringUnkownRecord;
                setFormValue: (value: StringUnkownRecord) => Promise<void>;
                formValue: import('vue').ComputedRef<StringUnkownRecord>;
                presistForm: () => void;
                formValueString: import('vue').ComputedRef<string>;
                clearInput: (inputName: string) => Promise<void>;
                activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                refetchDropdownInput: (inputName: string) => Promise<void>;
                setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                resetForm: () => void;
                formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                clearForm: () => void;
                formOptions: import('../../pkg/types/types').AppFormOptions;
            }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                initialFormValue: StringUnkownRecord;
                setFormValue: (value: StringUnkownRecord) => Promise<void>;
                formValue: import('vue').ComputedRef<StringUnkownRecord>;
                presistForm: () => void;
                formValueString: import('vue').ComputedRef<string>;
                clearInput: (inputName: string) => Promise<void>;
                activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                refetchDropdownInput: (inputName: string) => Promise<void>;
                setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                resetForm: () => void;
                formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                clearForm: () => void;
                formOptions: import('../../pkg/types/types').AppFormOptions;
            }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                initialFormValue: StringUnkownRecord;
                setFormValue: (value: StringUnkownRecord) => Promise<void>;
                formValue: import('vue').ComputedRef<StringUnkownRecord>;
                presistForm: () => void;
                formValueString: import('vue').ComputedRef<string>;
                clearInput: (inputName: string) => Promise<void>;
                activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                refetchDropdownInput: (inputName: string) => Promise<void>;
                setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                resetForm: () => void;
                formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                clearForm: () => void;
                formOptions: import('../../pkg/types/types').AppFormOptions;
            }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
            createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
            isShowDeletedRef: import('vue').Ref<boolean, boolean>;
            debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
            permittedActions: import('vue').ComputedRef<{
                rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
            }>;
            optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
            deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
            filtersFormKey: string;
            dialogRef: unknown;
            init: () => Promise<void>;
        }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
            filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
            datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
            filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
            currenData: import('vue').ComputedRef<TRecord[]>;
            globalFilters: string[];
            datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
            filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
            deleteRestoreOpenDialog: (params?: {
                record?: TRecord | undefined;
                isHardDelete?: boolean;
            } | undefined) => void;
            modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
            isFiltersFormValid: import('vue').ComputedRef<boolean>;
            viewRecord: (record: TRecord) => void;
            filtersFormStore: import('pinia').Store<string, Pick<{
                initialFormValue: StringUnkownRecord;
                setFormValue: (value: StringUnkownRecord) => Promise<void>;
                formValue: import('vue').ComputedRef<StringUnkownRecord>;
                presistForm: () => void;
                formValueString: import('vue').ComputedRef<string>;
                clearInput: (inputName: string) => Promise<void>;
                activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                refetchDropdownInput: (inputName: string) => Promise<void>;
                setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                resetForm: () => void;
                formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                clearForm: () => void;
                formOptions: import('../../pkg/types/types').AppFormOptions;
            }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                initialFormValue: StringUnkownRecord;
                setFormValue: (value: StringUnkownRecord) => Promise<void>;
                formValue: import('vue').ComputedRef<StringUnkownRecord>;
                presistForm: () => void;
                formValueString: import('vue').ComputedRef<string>;
                clearInput: (inputName: string) => Promise<void>;
                activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                refetchDropdownInput: (inputName: string) => Promise<void>;
                setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                resetForm: () => void;
                formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                clearForm: () => void;
                formOptions: import('../../pkg/types/types').AppFormOptions;
            }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                initialFormValue: StringUnkownRecord;
                setFormValue: (value: StringUnkownRecord) => Promise<void>;
                formValue: import('vue').ComputedRef<StringUnkownRecord>;
                presistForm: () => void;
                formValueString: import('vue').ComputedRef<string>;
                clearInput: (inputName: string) => Promise<void>;
                activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                refetchDropdownInput: (inputName: string) => Promise<void>;
                setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                resetForm: () => void;
                formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                clearForm: () => void;
                formOptions: import('../../pkg/types/types').AppFormOptions;
            }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
            createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
            isShowDeletedRef: import('vue').Ref<boolean, boolean>;
            debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
            permittedActions: import('vue').ComputedRef<{
                rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
            }>;
            optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
            deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
            filtersFormKey: string;
            dialogRef: unknown;
            init: () => Promise<void>;
        }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        data: TRecord;
    }) => VNode[] | VNode | undefined; } & {
        "globalActions.delete"?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode | undefined) | undefined;
        "globalActions.deleteRestore"?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode | undefined) | undefined;
        "globalActions.create"?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode | undefined) | undefined;
        "globalActions.export"?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode | undefined) | undefined;
    } & {
        "rowActions.delete"?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
            data: TRecord;
        }) => VNode[] | VNode | undefined) | undefined;
        "rowActions.deleteRestore"?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
            data: TRecord;
        }) => VNode[] | VNode | undefined) | undefined;
        "rowActions.update"?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
            data: TRecord;
        }) => VNode[] | VNode | undefined) | undefined;
        "rowActions.view"?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
            data: TRecord;
        }) => VNode[] | VNode | undefined) | undefined;
    }> & {
        card?: ((props: {
            data: TRecord;
        }) => VNode | VNode[]) | undefined;
        cardStart?: ((props: {
            data: TRecord;
        }) => VNode | VNode[]) | undefined;
        cardEnd?: ((props: {
            data: TRecord;
        }) => VNode | VNode[]) | undefined;
        expansion?: ((props: {
            data: TRecord;
        }) => VNode[] | VNode) | undefined;
        globalActions?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode) | undefined;
        globalActionsStartPrepend?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode) | undefined;
        globalActionsStartAppend?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode) | undefined;
        globalActionsEndPrepend?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode) | undefined;
        globalActionsEndAppend?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode) | undefined;
        loading?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode) | undefined;
        paginatorcontainer?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode) | undefined;
        paginatorstart?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode) | undefined;
        paginatorend?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode) | undefined;
        empty?: () => VNode | VNode[];
        filtersPanel?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode) | undefined;
        filtersPresist?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode) | undefined;
        filtersReset?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode) | undefined;
        filtersForm?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode) | undefined;
        filtersFormAppend?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode) | undefined;
        filtersFormPrepend?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode) | undefined;
        header?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode) | undefined;
        dropdownActions?: ((props: {
            data: TRecord;
        }) => VNode[] | VNode) | undefined;
        actions?: ((props: {
            data: TRecord;
        }) => VNode[] | VNode) | undefined;
        actionsPrepend?: ((props: {
            data: TRecord;
        }) => VNode[] | VNode) | undefined;
        actionsAppend?: ((props: {
            data: TRecord;
        }) => VNode[] | VNode) | undefined;
    } & { [K in keyof TRecord as K extends string ? `column.${K}` : never]: (props: {
        store: import('pinia').Store<string, Pick<{
            filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
            datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
            filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
            currenData: import('vue').ComputedRef<TRecord[]>;
            globalFilters: string[];
            datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
            filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
            deleteRestoreOpenDialog: (params?: {
                record?: TRecord | undefined;
                isHardDelete?: boolean;
            } | undefined) => void;
            modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
            isFiltersFormValid: import('vue').ComputedRef<boolean>;
            viewRecord: (record: TRecord) => void;
            filtersFormStore: import('pinia').Store<string, Pick<{
                initialFormValue: StringUnkownRecord;
                setFormValue: (value: StringUnkownRecord) => Promise<void>;
                formValue: import('vue').ComputedRef<StringUnkownRecord>;
                presistForm: () => void;
                formValueString: import('vue').ComputedRef<string>;
                clearInput: (inputName: string) => Promise<void>;
                activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                refetchDropdownInput: (inputName: string) => Promise<void>;
                setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                resetForm: () => void;
                formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                clearForm: () => void;
                formOptions: import('../../pkg/types/types').AppFormOptions;
            }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                initialFormValue: StringUnkownRecord;
                setFormValue: (value: StringUnkownRecord) => Promise<void>;
                formValue: import('vue').ComputedRef<StringUnkownRecord>;
                presistForm: () => void;
                formValueString: import('vue').ComputedRef<string>;
                clearInput: (inputName: string) => Promise<void>;
                activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                refetchDropdownInput: (inputName: string) => Promise<void>;
                setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                resetForm: () => void;
                formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                clearForm: () => void;
                formOptions: import('../../pkg/types/types').AppFormOptions;
            }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                initialFormValue: StringUnkownRecord;
                setFormValue: (value: StringUnkownRecord) => Promise<void>;
                formValue: import('vue').ComputedRef<StringUnkownRecord>;
                presistForm: () => void;
                formValueString: import('vue').ComputedRef<string>;
                clearInput: (inputName: string) => Promise<void>;
                activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                refetchDropdownInput: (inputName: string) => Promise<void>;
                setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                resetForm: () => void;
                formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                clearForm: () => void;
                formOptions: import('../../pkg/types/types').AppFormOptions;
            }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
            createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
            isShowDeletedRef: import('vue').Ref<boolean, boolean>;
            debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
            permittedActions: import('vue').ComputedRef<{
                rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
            }>;
            optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
            deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
            filtersFormKey: string;
            dialogRef: unknown;
            init: () => Promise<void>;
        }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
            filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
            datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
            filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
            currenData: import('vue').ComputedRef<TRecord[]>;
            globalFilters: string[];
            datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
            filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
            deleteRestoreOpenDialog: (params?: {
                record?: TRecord | undefined;
                isHardDelete?: boolean;
            } | undefined) => void;
            modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
            isFiltersFormValid: import('vue').ComputedRef<boolean>;
            viewRecord: (record: TRecord) => void;
            filtersFormStore: import('pinia').Store<string, Pick<{
                initialFormValue: StringUnkownRecord;
                setFormValue: (value: StringUnkownRecord) => Promise<void>;
                formValue: import('vue').ComputedRef<StringUnkownRecord>;
                presistForm: () => void;
                formValueString: import('vue').ComputedRef<string>;
                clearInput: (inputName: string) => Promise<void>;
                activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                refetchDropdownInput: (inputName: string) => Promise<void>;
                setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                resetForm: () => void;
                formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                clearForm: () => void;
                formOptions: import('../../pkg/types/types').AppFormOptions;
            }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                initialFormValue: StringUnkownRecord;
                setFormValue: (value: StringUnkownRecord) => Promise<void>;
                formValue: import('vue').ComputedRef<StringUnkownRecord>;
                presistForm: () => void;
                formValueString: import('vue').ComputedRef<string>;
                clearInput: (inputName: string) => Promise<void>;
                activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                refetchDropdownInput: (inputName: string) => Promise<void>;
                setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                resetForm: () => void;
                formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                clearForm: () => void;
                formOptions: import('../../pkg/types/types').AppFormOptions;
            }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                initialFormValue: StringUnkownRecord;
                setFormValue: (value: StringUnkownRecord) => Promise<void>;
                formValue: import('vue').ComputedRef<StringUnkownRecord>;
                presistForm: () => void;
                formValueString: import('vue').ComputedRef<string>;
                clearInput: (inputName: string) => Promise<void>;
                activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                refetchDropdownInput: (inputName: string) => Promise<void>;
                setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                resetForm: () => void;
                formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                clearForm: () => void;
                formOptions: import('../../pkg/types/types').AppFormOptions;
            }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
            createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
            isShowDeletedRef: import('vue').Ref<boolean, boolean>;
            debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
            permittedActions: import('vue').ComputedRef<{
                rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
            }>;
            optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
            deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
            filtersFormKey: string;
            dialogRef: unknown;
            init: () => Promise<void>;
        }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
            filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
            datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
            filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
            currenData: import('vue').ComputedRef<TRecord[]>;
            globalFilters: string[];
            datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
            filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
            deleteRestoreOpenDialog: (params?: {
                record?: TRecord | undefined;
                isHardDelete?: boolean;
            } | undefined) => void;
            modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
            isFiltersFormValid: import('vue').ComputedRef<boolean>;
            viewRecord: (record: TRecord) => void;
            filtersFormStore: import('pinia').Store<string, Pick<{
                initialFormValue: StringUnkownRecord;
                setFormValue: (value: StringUnkownRecord) => Promise<void>;
                formValue: import('vue').ComputedRef<StringUnkownRecord>;
                presistForm: () => void;
                formValueString: import('vue').ComputedRef<string>;
                clearInput: (inputName: string) => Promise<void>;
                activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                refetchDropdownInput: (inputName: string) => Promise<void>;
                setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                resetForm: () => void;
                formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                clearForm: () => void;
                formOptions: import('../../pkg/types/types').AppFormOptions;
            }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                initialFormValue: StringUnkownRecord;
                setFormValue: (value: StringUnkownRecord) => Promise<void>;
                formValue: import('vue').ComputedRef<StringUnkownRecord>;
                presistForm: () => void;
                formValueString: import('vue').ComputedRef<string>;
                clearInput: (inputName: string) => Promise<void>;
                activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                refetchDropdownInput: (inputName: string) => Promise<void>;
                setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                resetForm: () => void;
                formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                clearForm: () => void;
                formOptions: import('../../pkg/types/types').AppFormOptions;
            }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                initialFormValue: StringUnkownRecord;
                setFormValue: (value: StringUnkownRecord) => Promise<void>;
                formValue: import('vue').ComputedRef<StringUnkownRecord>;
                presistForm: () => void;
                formValueString: import('vue').ComputedRef<string>;
                clearInput: (inputName: string) => Promise<void>;
                activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                refetchDropdownInput: (inputName: string) => Promise<void>;
                setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                resetForm: () => void;
                formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                clearForm: () => void;
                formOptions: import('../../pkg/types/types').AppFormOptions;
            }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
            createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
            isShowDeletedRef: import('vue').Ref<boolean, boolean>;
            debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
            permittedActions: import('vue').ComputedRef<{
                rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
            }>;
            optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
            deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
            filtersFormKey: string;
            dialogRef: unknown;
            init: () => Promise<void>;
        }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        data: TRecord;
    }) => VNode[] | VNode | undefined; } & {
        "globalActions.delete"?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode | undefined) | undefined;
        "globalActions.deleteRestore"?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode | undefined) | undefined;
        "globalActions.create"?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode | undefined) | undefined;
        "globalActions.export"?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
        }) => VNode[] | VNode | undefined) | undefined;
    } & {
        "rowActions.delete"?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
            data: TRecord;
        }) => VNode[] | VNode | undefined) | undefined;
        "rowActions.deleteRestore"?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
            data: TRecord;
        }) => VNode[] | VNode | undefined) | undefined;
        "rowActions.update"?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
            data: TRecord;
        }) => VNode[] | VNode | undefined) | undefined;
        "rowActions.view"?: ((props: {
            store: import('pinia').Store<string, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
                filtersFormSchema: import('@formkit/core').FormKitSchemaNode[];
                datatableColumnsRef: import('vue').Ref<Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('./types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
                filterFormValue: import('vue').ComputedRef<import('./types').DatalistFiltersModel>;
                currenData: import('vue').ComputedRef<TRecord[]>;
                globalFilters: string[];
                datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<import('./types').ApiResponseList<TRecord>, Error>;
                filtersFormProps: import('../../pkg/types/types').AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
                deleteRestoreOpenDialog: (params?: {
                    record?: TRecord | undefined;
                    isHardDelete?: boolean;
                } | undefined) => void;
                modelSelectionRef: import('vue').Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
                isFiltersFormValid: import('vue').ComputedRef<boolean>;
                viewRecord: (record: TRecord) => void;
                filtersFormStore: import('pinia').Store<string, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "formValue" | "formValueString" | "activeInputs">, Pick<{
                    initialFormValue: StringUnkownRecord;
                    setFormValue: (value: StringUnkownRecord) => Promise<void>;
                    formValue: import('vue').ComputedRef<StringUnkownRecord>;
                    presistForm: () => void;
                    formValueString: import('vue').ComputedRef<string>;
                    clearInput: (inputName: string) => Promise<void>;
                    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
                    refetchDropdownInput: (inputName: string) => Promise<void>;
                    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
                    resetForm: () => void;
                    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
                    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
                    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
                    clearForm: () => void;
                    formOptions: import('../../pkg/types/types').AppFormOptions;
                }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
                createUpdateRecord: (emitFn: (response: import('devkit-apiclient').StringUnkownRecord) => void, record?: TRecord | undefined) => void;
                isShowDeletedRef: import('vue').Ref<boolean, boolean>;
                debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
                permittedActions: import('vue').ComputedRef<{
                    rowActions: import('./types').ActionButtonProps<import('./types').DatalistRowActions>[];
                    globalActions: import('./types').ActionButtonProps<import('./types').DatalistGlobalActions>[];
                }>;
                optionsInUse: import('vue').ComputedRef<import('./types').ApiListOptions>;
                deleteRestoreVariants: import('vue').ComputedRef<import('./types').DeleteRestoreVariant>;
                filtersFormKey: string;
                dialogRef: unknown;
                init: () => Promise<void>;
            }, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
            data: TRecord;
        }) => VNode[] | VNode | undefined) | undefined;
    };
    emit: DatalistEmits<TRecord, TApiResponse>;
}>) => import('vue').VNode & {
    __ctx?: Awaited<typeof __VLS_setup>;
};
export default _default;
type __VLS_PrettifyLocal<T> = {
    [K in keyof T]: T[K];
} & {};
