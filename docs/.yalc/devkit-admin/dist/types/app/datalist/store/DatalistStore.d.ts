import { Ref } from 'vue';
import { ActionButtonProps, ApiListOptions, ApiResponseList, DatalistFiltersModel, DatalistGlobalActions, DatalistProps, DatalistRowActions, DeleteRestoreVariant } from '../types';
import { FormKitSchemaNode } from '@formkit/core';
import { StringUnkownRecord } from 'devkit-apiclient';
import { AppFormProps } from '../../../pkg/types/types';
export declare const useDatalistStore: <TApi extends Record<string, Function>, TReq extends StringUnkownRecord, TRecord extends StringUnkownRecord, TFiltersReq extends StringUnkownRecord | undefined = undefined, TApiResponse extends StringUnkownRecord | undefined = undefined, TFormSectionsRequest extends StringUnkownRecord | undefined = undefined>({ context }: DatalistProps<TApi, TReq, TRecord, TFiltersReq, TApiResponse, TFormSectionsRequest>) => import('pinia').StoreDefinition<string, Pick<{
    filtersFormSchema: FormKitSchemaNode[];
    datatableColumnsRef: Ref<Partial<Record<keyof TRecord, import('../types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('../types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
    filterFormValue: import('vue').ComputedRef<DatalistFiltersModel>;
    currenData: import('vue').ComputedRef<TRecord[]>;
    globalFilters: string[];
    datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<ApiResponseList<TRecord>, Error>;
    filtersFormProps: AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
    deleteRestoreOpenDialog: (params?: {
        record?: TRecord;
        isHardDelete?: boolean;
    }) => void;
    modelSelectionRef: Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
    isFiltersFormValid: import('vue').ComputedRef<boolean>;
    viewRecord: (record: TRecord) => void;
    filtersFormStore: import('pinia').Store<string, Pick<{
        initialFormValue: import('../../../pkg/types/types').StringUnkownRecord;
        setFormValue: (value: import('../../../pkg/types/types').StringUnkownRecord) => Promise<void>;
        formValue: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        presistForm: () => void;
        formValueString: import('vue').ComputedRef<string>;
        clearInput: (inputName: string) => Promise<void>;
        activeInputs: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        refetchDropdownInput: (inputName: string) => Promise<void>;
        setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
        resetForm: () => void;
        formElementNode: Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
        formElementContext: Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
        debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
        clearForm: () => void;
        formOptions: import('../../../pkg/types/types').AppFormOptions;
    }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
        initialFormValue: import('../../../pkg/types/types').StringUnkownRecord;
        setFormValue: (value: import('../../../pkg/types/types').StringUnkownRecord) => Promise<void>;
        formValue: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        presistForm: () => void;
        formValueString: import('vue').ComputedRef<string>;
        clearInput: (inputName: string) => Promise<void>;
        activeInputs: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        refetchDropdownInput: (inputName: string) => Promise<void>;
        setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
        resetForm: () => void;
        formElementNode: Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
        formElementContext: Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
        debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
        clearForm: () => void;
        formOptions: import('../../../pkg/types/types').AppFormOptions;
    }, "formValue" | "formValueString" | "activeInputs">, Pick<{
        initialFormValue: import('../../../pkg/types/types').StringUnkownRecord;
        setFormValue: (value: import('../../../pkg/types/types').StringUnkownRecord) => Promise<void>;
        formValue: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        presistForm: () => void;
        formValueString: import('vue').ComputedRef<string>;
        clearInput: (inputName: string) => Promise<void>;
        activeInputs: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        refetchDropdownInput: (inputName: string) => Promise<void>;
        setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
        resetForm: () => void;
        formElementNode: Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
        formElementContext: Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
        debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
        clearForm: () => void;
        formOptions: import('../../../pkg/types/types').AppFormOptions;
    }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
    createUpdateRecord: (emitFn: (response: StringUnkownRecord) => void, record?: TRecord) => void;
    isShowDeletedRef: Ref<boolean, boolean>;
    debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
    permittedActions: import('vue').ComputedRef<{
        rowActions: ActionButtonProps<DatalistRowActions>[];
        globalActions: ActionButtonProps<DatalistGlobalActions>[];
    }>;
    optionsInUse: import('vue').ComputedRef<ApiListOptions>;
    deleteRestoreVariants: import('vue').ComputedRef<DeleteRestoreVariant>;
    filtersFormKey: string;
    dialogRef: unknown;
    init: () => Promise<void>;
}, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
    filtersFormSchema: FormKitSchemaNode[];
    datatableColumnsRef: Ref<Partial<Record<keyof TRecord, import('../types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('../types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
    filterFormValue: import('vue').ComputedRef<DatalistFiltersModel>;
    currenData: import('vue').ComputedRef<TRecord[]>;
    globalFilters: string[];
    datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<ApiResponseList<TRecord>, Error>;
    filtersFormProps: AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
    deleteRestoreOpenDialog: (params?: {
        record?: TRecord;
        isHardDelete?: boolean;
    }) => void;
    modelSelectionRef: Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
    isFiltersFormValid: import('vue').ComputedRef<boolean>;
    viewRecord: (record: TRecord) => void;
    filtersFormStore: import('pinia').Store<string, Pick<{
        initialFormValue: import('../../../pkg/types/types').StringUnkownRecord;
        setFormValue: (value: import('../../../pkg/types/types').StringUnkownRecord) => Promise<void>;
        formValue: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        presistForm: () => void;
        formValueString: import('vue').ComputedRef<string>;
        clearInput: (inputName: string) => Promise<void>;
        activeInputs: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        refetchDropdownInput: (inputName: string) => Promise<void>;
        setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
        resetForm: () => void;
        formElementNode: Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
        formElementContext: Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
        debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
        clearForm: () => void;
        formOptions: import('../../../pkg/types/types').AppFormOptions;
    }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
        initialFormValue: import('../../../pkg/types/types').StringUnkownRecord;
        setFormValue: (value: import('../../../pkg/types/types').StringUnkownRecord) => Promise<void>;
        formValue: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        presistForm: () => void;
        formValueString: import('vue').ComputedRef<string>;
        clearInput: (inputName: string) => Promise<void>;
        activeInputs: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        refetchDropdownInput: (inputName: string) => Promise<void>;
        setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
        resetForm: () => void;
        formElementNode: Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
        formElementContext: Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
        debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
        clearForm: () => void;
        formOptions: import('../../../pkg/types/types').AppFormOptions;
    }, "formValue" | "formValueString" | "activeInputs">, Pick<{
        initialFormValue: import('../../../pkg/types/types').StringUnkownRecord;
        setFormValue: (value: import('../../../pkg/types/types').StringUnkownRecord) => Promise<void>;
        formValue: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        presistForm: () => void;
        formValueString: import('vue').ComputedRef<string>;
        clearInput: (inputName: string) => Promise<void>;
        activeInputs: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        refetchDropdownInput: (inputName: string) => Promise<void>;
        setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
        resetForm: () => void;
        formElementNode: Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
        formElementContext: Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
        debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
        clearForm: () => void;
        formOptions: import('../../../pkg/types/types').AppFormOptions;
    }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
    createUpdateRecord: (emitFn: (response: StringUnkownRecord) => void, record?: TRecord) => void;
    isShowDeletedRef: Ref<boolean, boolean>;
    debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
    permittedActions: import('vue').ComputedRef<{
        rowActions: ActionButtonProps<DatalistRowActions>[];
        globalActions: ActionButtonProps<DatalistGlobalActions>[];
    }>;
    optionsInUse: import('vue').ComputedRef<ApiListOptions>;
    deleteRestoreVariants: import('vue').ComputedRef<DeleteRestoreVariant>;
    filtersFormKey: string;
    dialogRef: unknown;
    init: () => Promise<void>;
}, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
    filtersFormSchema: FormKitSchemaNode[];
    datatableColumnsRef: Ref<Partial<Record<keyof TRecord, import('../types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('../types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
    filterFormValue: import('vue').ComputedRef<DatalistFiltersModel>;
    currenData: import('vue').ComputedRef<TRecord[]>;
    globalFilters: string[];
    datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<ApiResponseList<TRecord>, Error>;
    filtersFormProps: AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
    deleteRestoreOpenDialog: (params?: {
        record?: TRecord;
        isHardDelete?: boolean;
    }) => void;
    modelSelectionRef: Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
    isFiltersFormValid: import('vue').ComputedRef<boolean>;
    viewRecord: (record: TRecord) => void;
    filtersFormStore: import('pinia').Store<string, Pick<{
        initialFormValue: import('../../../pkg/types/types').StringUnkownRecord;
        setFormValue: (value: import('../../../pkg/types/types').StringUnkownRecord) => Promise<void>;
        formValue: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        presistForm: () => void;
        formValueString: import('vue').ComputedRef<string>;
        clearInput: (inputName: string) => Promise<void>;
        activeInputs: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        refetchDropdownInput: (inputName: string) => Promise<void>;
        setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
        resetForm: () => void;
        formElementNode: Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
        formElementContext: Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
        debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
        clearForm: () => void;
        formOptions: import('../../../pkg/types/types').AppFormOptions;
    }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
        initialFormValue: import('../../../pkg/types/types').StringUnkownRecord;
        setFormValue: (value: import('../../../pkg/types/types').StringUnkownRecord) => Promise<void>;
        formValue: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        presistForm: () => void;
        formValueString: import('vue').ComputedRef<string>;
        clearInput: (inputName: string) => Promise<void>;
        activeInputs: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        refetchDropdownInput: (inputName: string) => Promise<void>;
        setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
        resetForm: () => void;
        formElementNode: Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
        formElementContext: Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
        debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
        clearForm: () => void;
        formOptions: import('../../../pkg/types/types').AppFormOptions;
    }, "formValue" | "formValueString" | "activeInputs">, Pick<{
        initialFormValue: import('../../../pkg/types/types').StringUnkownRecord;
        setFormValue: (value: import('../../../pkg/types/types').StringUnkownRecord) => Promise<void>;
        formValue: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        presistForm: () => void;
        formValueString: import('vue').ComputedRef<string>;
        clearInput: (inputName: string) => Promise<void>;
        activeInputs: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        refetchDropdownInput: (inputName: string) => Promise<void>;
        setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
        resetForm: () => void;
        formElementNode: Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
        formElementContext: Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
        debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
        clearForm: () => void;
        formOptions: import('../../../pkg/types/types').AppFormOptions;
    }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
    createUpdateRecord: (emitFn: (response: StringUnkownRecord) => void, record?: TRecord) => void;
    isShowDeletedRef: Ref<boolean, boolean>;
    debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
    permittedActions: import('vue').ComputedRef<{
        rowActions: ActionButtonProps<DatalistRowActions>[];
        globalActions: ActionButtonProps<DatalistGlobalActions>[];
    }>;
    optionsInUse: import('vue').ComputedRef<ApiListOptions>;
    deleteRestoreVariants: import('vue').ComputedRef<DeleteRestoreVariant>;
    filtersFormKey: string;
    dialogRef: unknown;
    init: () => Promise<void>;
}, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
export declare const useDatalistStoreWithProps: <TApi extends Record<string, Function>, TReq extends StringUnkownRecord, TRecord extends StringUnkownRecord, TFiltersReq extends StringUnkownRecord | undefined = undefined, TApiResponse extends StringUnkownRecord | undefined = undefined, TFormSectionsRequest extends StringUnkownRecord | undefined = undefined>(props: DatalistProps<TApi, TReq, TRecord, TFiltersReq, TApiResponse, TFormSectionsRequest>) => import('pinia').Store<string, Pick<{
    filtersFormSchema: FormKitSchemaNode[];
    datatableColumnsRef: Ref<Partial<Record<keyof TRecord, import('../types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('../types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
    filterFormValue: import('vue').ComputedRef<DatalistFiltersModel>;
    currenData: import('vue').ComputedRef<TRecord[]>;
    globalFilters: string[];
    datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<ApiResponseList<TRecord>, Error>;
    filtersFormProps: AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
    deleteRestoreOpenDialog: (params?: {
        record?: TRecord | undefined;
        isHardDelete?: boolean;
    } | undefined) => void;
    modelSelectionRef: Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
    isFiltersFormValid: import('vue').ComputedRef<boolean>;
    viewRecord: (record: TRecord) => void;
    filtersFormStore: import('pinia').Store<string, Pick<{
        initialFormValue: import('../../../pkg/types/types').StringUnkownRecord;
        setFormValue: (value: import('../../../pkg/types/types').StringUnkownRecord) => Promise<void>;
        formValue: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        presistForm: () => void;
        formValueString: import('vue').ComputedRef<string>;
        clearInput: (inputName: string) => Promise<void>;
        activeInputs: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        refetchDropdownInput: (inputName: string) => Promise<void>;
        setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
        resetForm: () => void;
        formElementNode: Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
        formElementContext: Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
        debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
        clearForm: () => void;
        formOptions: import('../../../pkg/types/types').AppFormOptions;
    }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
        initialFormValue: import('../../../pkg/types/types').StringUnkownRecord;
        setFormValue: (value: import('../../../pkg/types/types').StringUnkownRecord) => Promise<void>;
        formValue: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        presistForm: () => void;
        formValueString: import('vue').ComputedRef<string>;
        clearInput: (inputName: string) => Promise<void>;
        activeInputs: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        refetchDropdownInput: (inputName: string) => Promise<void>;
        setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
        resetForm: () => void;
        formElementNode: Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
        formElementContext: Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
        debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
        clearForm: () => void;
        formOptions: import('../../../pkg/types/types').AppFormOptions;
    }, "formValue" | "formValueString" | "activeInputs">, Pick<{
        initialFormValue: import('../../../pkg/types/types').StringUnkownRecord;
        setFormValue: (value: import('../../../pkg/types/types').StringUnkownRecord) => Promise<void>;
        formValue: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        presistForm: () => void;
        formValueString: import('vue').ComputedRef<string>;
        clearInput: (inputName: string) => Promise<void>;
        activeInputs: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        refetchDropdownInput: (inputName: string) => Promise<void>;
        setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
        resetForm: () => void;
        formElementNode: Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
        formElementContext: Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
        debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
        clearForm: () => void;
        formOptions: import('../../../pkg/types/types').AppFormOptions;
    }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
    createUpdateRecord: (emitFn: (response: StringUnkownRecord) => void, record?: TRecord | undefined) => void;
    isShowDeletedRef: Ref<boolean, boolean>;
    debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
    permittedActions: import('vue').ComputedRef<{
        rowActions: ActionButtonProps<DatalistRowActions>[];
        globalActions: ActionButtonProps<DatalistGlobalActions>[];
    }>;
    optionsInUse: import('vue').ComputedRef<ApiListOptions>;
    deleteRestoreVariants: import('vue').ComputedRef<DeleteRestoreVariant>;
    filtersFormKey: string;
    dialogRef: unknown;
    init: () => Promise<void>;
}, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
    filtersFormSchema: FormKitSchemaNode[];
    datatableColumnsRef: Ref<Partial<Record<keyof TRecord, import('../types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('../types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
    filterFormValue: import('vue').ComputedRef<DatalistFiltersModel>;
    currenData: import('vue').ComputedRef<TRecord[]>;
    globalFilters: string[];
    datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<ApiResponseList<TRecord>, Error>;
    filtersFormProps: AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
    deleteRestoreOpenDialog: (params?: {
        record?: TRecord | undefined;
        isHardDelete?: boolean;
    } | undefined) => void;
    modelSelectionRef: Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
    isFiltersFormValid: import('vue').ComputedRef<boolean>;
    viewRecord: (record: TRecord) => void;
    filtersFormStore: import('pinia').Store<string, Pick<{
        initialFormValue: import('../../../pkg/types/types').StringUnkownRecord;
        setFormValue: (value: import('../../../pkg/types/types').StringUnkownRecord) => Promise<void>;
        formValue: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        presistForm: () => void;
        formValueString: import('vue').ComputedRef<string>;
        clearInput: (inputName: string) => Promise<void>;
        activeInputs: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        refetchDropdownInput: (inputName: string) => Promise<void>;
        setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
        resetForm: () => void;
        formElementNode: Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
        formElementContext: Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
        debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
        clearForm: () => void;
        formOptions: import('../../../pkg/types/types').AppFormOptions;
    }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
        initialFormValue: import('../../../pkg/types/types').StringUnkownRecord;
        setFormValue: (value: import('../../../pkg/types/types').StringUnkownRecord) => Promise<void>;
        formValue: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        presistForm: () => void;
        formValueString: import('vue').ComputedRef<string>;
        clearInput: (inputName: string) => Promise<void>;
        activeInputs: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        refetchDropdownInput: (inputName: string) => Promise<void>;
        setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
        resetForm: () => void;
        formElementNode: Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
        formElementContext: Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
        debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
        clearForm: () => void;
        formOptions: import('../../../pkg/types/types').AppFormOptions;
    }, "formValue" | "formValueString" | "activeInputs">, Pick<{
        initialFormValue: import('../../../pkg/types/types').StringUnkownRecord;
        setFormValue: (value: import('../../../pkg/types/types').StringUnkownRecord) => Promise<void>;
        formValue: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        presistForm: () => void;
        formValueString: import('vue').ComputedRef<string>;
        clearInput: (inputName: string) => Promise<void>;
        activeInputs: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        refetchDropdownInput: (inputName: string) => Promise<void>;
        setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
        resetForm: () => void;
        formElementNode: Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
        formElementContext: Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
        debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
        clearForm: () => void;
        formOptions: import('../../../pkg/types/types').AppFormOptions;
    }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
    createUpdateRecord: (emitFn: (response: StringUnkownRecord) => void, record?: TRecord | undefined) => void;
    isShowDeletedRef: Ref<boolean, boolean>;
    debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
    permittedActions: import('vue').ComputedRef<{
        rowActions: ActionButtonProps<DatalistRowActions>[];
        globalActions: ActionButtonProps<DatalistGlobalActions>[];
    }>;
    optionsInUse: import('vue').ComputedRef<ApiListOptions>;
    deleteRestoreVariants: import('vue').ComputedRef<DeleteRestoreVariant>;
    filtersFormKey: string;
    dialogRef: unknown;
    init: () => Promise<void>;
}, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
    filtersFormSchema: FormKitSchemaNode[];
    datatableColumnsRef: Ref<Partial<Record<keyof TRecord, import('../types').DatalistColumnBase<TRecord, TFiltersReq>>>, Partial<Record<keyof TRecord, import('../types').DatalistColumnBase<TRecord, TFiltersReq>>>>;
    filterFormValue: import('vue').ComputedRef<DatalistFiltersModel>;
    currenData: import('vue').ComputedRef<TRecord[]>;
    globalFilters: string[];
    datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<ApiResponseList<TRecord>, Error>;
    filtersFormProps: AppFormProps<TApi, Record<string, unknown>, Record<string, unknown>>;
    deleteRestoreOpenDialog: (params?: {
        record?: TRecord | undefined;
        isHardDelete?: boolean;
    } | undefined) => void;
    modelSelectionRef: Ref<import('@vue/reactivity').UnwrapRefSimple<TRecord>[], TRecord[] | import('@vue/reactivity').UnwrapRefSimple<TRecord>[]>;
    isFiltersFormValid: import('vue').ComputedRef<boolean>;
    viewRecord: (record: TRecord) => void;
    filtersFormStore: import('pinia').Store<string, Pick<{
        initialFormValue: import('../../../pkg/types/types').StringUnkownRecord;
        setFormValue: (value: import('../../../pkg/types/types').StringUnkownRecord) => Promise<void>;
        formValue: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        presistForm: () => void;
        formValueString: import('vue').ComputedRef<string>;
        clearInput: (inputName: string) => Promise<void>;
        activeInputs: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        refetchDropdownInput: (inputName: string) => Promise<void>;
        setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
        resetForm: () => void;
        formElementNode: Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
        formElementContext: Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
        debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
        clearForm: () => void;
        formOptions: import('../../../pkg/types/types').AppFormOptions;
    }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
        initialFormValue: import('../../../pkg/types/types').StringUnkownRecord;
        setFormValue: (value: import('../../../pkg/types/types').StringUnkownRecord) => Promise<void>;
        formValue: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        presistForm: () => void;
        formValueString: import('vue').ComputedRef<string>;
        clearInput: (inputName: string) => Promise<void>;
        activeInputs: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        refetchDropdownInput: (inputName: string) => Promise<void>;
        setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
        resetForm: () => void;
        formElementNode: Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
        formElementContext: Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
        debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
        clearForm: () => void;
        formOptions: import('../../../pkg/types/types').AppFormOptions;
    }, "formValue" | "formValueString" | "activeInputs">, Pick<{
        initialFormValue: import('../../../pkg/types/types').StringUnkownRecord;
        setFormValue: (value: import('../../../pkg/types/types').StringUnkownRecord) => Promise<void>;
        formValue: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        presistForm: () => void;
        formValueString: import('vue').ComputedRef<string>;
        clearInput: (inputName: string) => Promise<void>;
        activeInputs: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        refetchDropdownInput: (inputName: string) => Promise<void>;
        setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
        resetForm: () => void;
        formElementNode: Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
        formElementContext: Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
        debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
        clearForm: () => void;
        formOptions: import('../../../pkg/types/types').AppFormOptions;
    }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
    createUpdateRecord: (emitFn: (response: StringUnkownRecord) => void, record?: TRecord | undefined) => void;
    isShowDeletedRef: Ref<boolean, boolean>;
    debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
    permittedActions: import('vue').ComputedRef<{
        rowActions: ActionButtonProps<DatalistRowActions>[];
        globalActions: ActionButtonProps<DatalistGlobalActions>[];
    }>;
    optionsInUse: import('vue').ComputedRef<ApiListOptions>;
    deleteRestoreVariants: import('vue').ComputedRef<DeleteRestoreVariant>;
    filtersFormKey: string;
    dialogRef: unknown;
    init: () => Promise<void>;
}, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
export declare const useDatalistStoreWithKey: (datalistKey: string) => import('pinia').Store<string, Pick<{
    filtersFormSchema: FormKitSchemaNode[];
    datatableColumnsRef: Ref<Partial<Record<string | number | symbol, import('../types').DatalistColumnBase<never, undefined>>>, Partial<Record<string | number | symbol, import('../types').DatalistColumnBase<never, undefined>>>>;
    filterFormValue: import('vue').ComputedRef<DatalistFiltersModel>;
    currenData: import('vue').ComputedRef<never[]>;
    globalFilters: string[];
    datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<ApiResponseList<never>, Error>;
    filtersFormProps: AppFormProps<Record<string, Function>, Record<string, unknown>, Record<string, unknown>>;
    deleteRestoreOpenDialog: (params?: {
        record?: undefined;
        isHardDelete?: boolean;
    } | undefined) => void;
    modelSelectionRef: Ref<never[], never[]>;
    isFiltersFormValid: import('vue').ComputedRef<boolean>;
    viewRecord: (record: never) => void;
    filtersFormStore: import('pinia').Store<string, Pick<{
        initialFormValue: import('../../../pkg/types/types').StringUnkownRecord;
        setFormValue: (value: import('../../../pkg/types/types').StringUnkownRecord) => Promise<void>;
        formValue: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        presistForm: () => void;
        formValueString: import('vue').ComputedRef<string>;
        clearInput: (inputName: string) => Promise<void>;
        activeInputs: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        refetchDropdownInput: (inputName: string) => Promise<void>;
        setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
        resetForm: () => void;
        formElementNode: Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
        formElementContext: Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
        debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
        clearForm: () => void;
        formOptions: import('../../../pkg/types/types').AppFormOptions;
    }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
        initialFormValue: import('../../../pkg/types/types').StringUnkownRecord;
        setFormValue: (value: import('../../../pkg/types/types').StringUnkownRecord) => Promise<void>;
        formValue: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        presistForm: () => void;
        formValueString: import('vue').ComputedRef<string>;
        clearInput: (inputName: string) => Promise<void>;
        activeInputs: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        refetchDropdownInput: (inputName: string) => Promise<void>;
        setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
        resetForm: () => void;
        formElementNode: Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
        formElementContext: Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
        debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
        clearForm: () => void;
        formOptions: import('../../../pkg/types/types').AppFormOptions;
    }, "formValue" | "formValueString" | "activeInputs">, Pick<{
        initialFormValue: import('../../../pkg/types/types').StringUnkownRecord;
        setFormValue: (value: import('../../../pkg/types/types').StringUnkownRecord) => Promise<void>;
        formValue: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        presistForm: () => void;
        formValueString: import('vue').ComputedRef<string>;
        clearInput: (inputName: string) => Promise<void>;
        activeInputs: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        refetchDropdownInput: (inputName: string) => Promise<void>;
        setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
        resetForm: () => void;
        formElementNode: Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
        formElementContext: Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
        debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
        clearForm: () => void;
        formOptions: import('../../../pkg/types/types').AppFormOptions;
    }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
    createUpdateRecord: (emitFn: (response: StringUnkownRecord) => void, record?: undefined) => void;
    isShowDeletedRef: Ref<boolean, boolean>;
    debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
    permittedActions: import('vue').ComputedRef<{
        rowActions: ActionButtonProps<DatalistRowActions>[];
        globalActions: ActionButtonProps<DatalistGlobalActions>[];
    }>;
    optionsInUse: import('vue').ComputedRef<ApiListOptions>;
    deleteRestoreVariants: import('vue').ComputedRef<DeleteRestoreVariant>;
    filtersFormKey: string;
    dialogRef: unknown;
    init: () => Promise<void>;
}, "dialogRef" | "filtersFormSchema" | "datatableColumnsRef" | "globalFilters" | "datalistQueryResult" | "filtersFormProps" | "modelSelectionRef" | "filtersFormStore" | "isShowDeletedRef" | "filtersFormKey">, Pick<{
    filtersFormSchema: FormKitSchemaNode[];
    datatableColumnsRef: Ref<Partial<Record<string | number | symbol, import('../types').DatalistColumnBase<never, undefined>>>, Partial<Record<string | number | symbol, import('../types').DatalistColumnBase<never, undefined>>>>;
    filterFormValue: import('vue').ComputedRef<DatalistFiltersModel>;
    currenData: import('vue').ComputedRef<never[]>;
    globalFilters: string[];
    datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<ApiResponseList<never>, Error>;
    filtersFormProps: AppFormProps<Record<string, Function>, Record<string, unknown>, Record<string, unknown>>;
    deleteRestoreOpenDialog: (params?: {
        record?: undefined;
        isHardDelete?: boolean;
    } | undefined) => void;
    modelSelectionRef: Ref<never[], never[]>;
    isFiltersFormValid: import('vue').ComputedRef<boolean>;
    viewRecord: (record: never) => void;
    filtersFormStore: import('pinia').Store<string, Pick<{
        initialFormValue: import('../../../pkg/types/types').StringUnkownRecord;
        setFormValue: (value: import('../../../pkg/types/types').StringUnkownRecord) => Promise<void>;
        formValue: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        presistForm: () => void;
        formValueString: import('vue').ComputedRef<string>;
        clearInput: (inputName: string) => Promise<void>;
        activeInputs: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        refetchDropdownInput: (inputName: string) => Promise<void>;
        setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
        resetForm: () => void;
        formElementNode: Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
        formElementContext: Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
        debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
        clearForm: () => void;
        formOptions: import('../../../pkg/types/types').AppFormOptions;
    }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
        initialFormValue: import('../../../pkg/types/types').StringUnkownRecord;
        setFormValue: (value: import('../../../pkg/types/types').StringUnkownRecord) => Promise<void>;
        formValue: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        presistForm: () => void;
        formValueString: import('vue').ComputedRef<string>;
        clearInput: (inputName: string) => Promise<void>;
        activeInputs: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        refetchDropdownInput: (inputName: string) => Promise<void>;
        setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
        resetForm: () => void;
        formElementNode: Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
        formElementContext: Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
        debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
        clearForm: () => void;
        formOptions: import('../../../pkg/types/types').AppFormOptions;
    }, "formValue" | "formValueString" | "activeInputs">, Pick<{
        initialFormValue: import('../../../pkg/types/types').StringUnkownRecord;
        setFormValue: (value: import('../../../pkg/types/types').StringUnkownRecord) => Promise<void>;
        formValue: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        presistForm: () => void;
        formValueString: import('vue').ComputedRef<string>;
        clearInput: (inputName: string) => Promise<void>;
        activeInputs: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        refetchDropdownInput: (inputName: string) => Promise<void>;
        setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
        resetForm: () => void;
        formElementNode: Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
        formElementContext: Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
        debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
        clearForm: () => void;
        formOptions: import('../../../pkg/types/types').AppFormOptions;
    }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
    createUpdateRecord: (emitFn: (response: StringUnkownRecord) => void, record?: undefined) => void;
    isShowDeletedRef: Ref<boolean, boolean>;
    debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
    permittedActions: import('vue').ComputedRef<{
        rowActions: ActionButtonProps<DatalistRowActions>[];
        globalActions: ActionButtonProps<DatalistGlobalActions>[];
    }>;
    optionsInUse: import('vue').ComputedRef<ApiListOptions>;
    deleteRestoreVariants: import('vue').ComputedRef<DeleteRestoreVariant>;
    filtersFormKey: string;
    dialogRef: unknown;
    init: () => Promise<void>;
}, "filterFormValue" | "currenData" | "isFiltersFormValid" | "permittedActions" | "optionsInUse" | "deleteRestoreVariants">, Pick<{
    filtersFormSchema: FormKitSchemaNode[];
    datatableColumnsRef: Ref<Partial<Record<string | number | symbol, import('../types').DatalistColumnBase<never, undefined>>>, Partial<Record<string | number | symbol, import('../types').DatalistColumnBase<never, undefined>>>>;
    filterFormValue: import('vue').ComputedRef<DatalistFiltersModel>;
    currenData: import('vue').ComputedRef<never[]>;
    globalFilters: string[];
    datalistQueryResult: import('@tanstack/vue-query').UseQueryReturnType<ApiResponseList<never>, Error>;
    filtersFormProps: AppFormProps<Record<string, Function>, Record<string, unknown>, Record<string, unknown>>;
    deleteRestoreOpenDialog: (params?: {
        record?: undefined;
        isHardDelete?: boolean;
    } | undefined) => void;
    modelSelectionRef: Ref<never[], never[]>;
    isFiltersFormValid: import('vue').ComputedRef<boolean>;
    viewRecord: (record: never) => void;
    filtersFormStore: import('pinia').Store<string, Pick<{
        initialFormValue: import('../../../pkg/types/types').StringUnkownRecord;
        setFormValue: (value: import('../../../pkg/types/types').StringUnkownRecord) => Promise<void>;
        formValue: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        presistForm: () => void;
        formValueString: import('vue').ComputedRef<string>;
        clearInput: (inputName: string) => Promise<void>;
        activeInputs: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        refetchDropdownInput: (inputName: string) => Promise<void>;
        setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
        resetForm: () => void;
        formElementNode: Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
        formElementContext: Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
        debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
        clearForm: () => void;
        formOptions: import('../../../pkg/types/types').AppFormOptions;
    }, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
        initialFormValue: import('../../../pkg/types/types').StringUnkownRecord;
        setFormValue: (value: import('../../../pkg/types/types').StringUnkownRecord) => Promise<void>;
        formValue: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        presistForm: () => void;
        formValueString: import('vue').ComputedRef<string>;
        clearInput: (inputName: string) => Promise<void>;
        activeInputs: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        refetchDropdownInput: (inputName: string) => Promise<void>;
        setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
        resetForm: () => void;
        formElementNode: Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
        formElementContext: Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
        debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
        clearForm: () => void;
        formOptions: import('../../../pkg/types/types').AppFormOptions;
    }, "formValue" | "formValueString" | "activeInputs">, Pick<{
        initialFormValue: import('../../../pkg/types/types').StringUnkownRecord;
        setFormValue: (value: import('../../../pkg/types/types').StringUnkownRecord) => Promise<void>;
        formValue: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        presistForm: () => void;
        formValueString: import('vue').ComputedRef<string>;
        clearInput: (inputName: string) => Promise<void>;
        activeInputs: import('vue').ComputedRef<import('../../../pkg/types/types').StringUnkownRecord>;
        refetchDropdownInput: (inputName: string) => Promise<void>;
        setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
        resetForm: () => void;
        formElementNode: Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
        formElementContext: Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
        debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
        clearForm: () => void;
        formOptions: import('../../../pkg/types/types').AppFormOptions;
    }, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
    createUpdateRecord: (emitFn: (response: StringUnkownRecord) => void, record?: undefined) => void;
    isShowDeletedRef: Ref<boolean, boolean>;
    debouncedRefetch: import('@vueuse/core').PromisifyFn<() => void>;
    permittedActions: import('vue').ComputedRef<{
        rowActions: ActionButtonProps<DatalistRowActions>[];
        globalActions: ActionButtonProps<DatalistGlobalActions>[];
    }>;
    optionsInUse: import('vue').ComputedRef<ApiListOptions>;
    deleteRestoreVariants: import('vue').ComputedRef<DeleteRestoreVariant>;
    filtersFormKey: string;
    dialogRef: unknown;
    init: () => Promise<void>;
}, "deleteRestoreOpenDialog" | "viewRecord" | "createUpdateRecord" | "debouncedRefetch" | "init">>;
