import { AppFormProps, StringUnkownRecord, AppFormOptions } from '../../../pkg/types/types';
export declare const useAppFormStore: <TApi extends Record<string, Function>, TFormRequest extends StringUnkownRecord = StringUnkownRecord, TApiRequest extends StringUnkownRecord = StringUnkownRecord, TApiResponse extends StringUnkownRecord = StringUnkownRecord, TFindRequestPropName extends string = "recordId", TFindResponsePropName extends string = "request", TFindCallbakResponse = unknown, TCallbakResponse = unknown>({ context }: AppFormProps<TApi, TFormRequest, TApiRequest, TApiResponse, TFindRequestPropName, TFindResponsePropName, TFindCallbakResponse, TCallbakResponse>) => import('pinia').StoreDefinition<string, Pick<{
    initialFormValue: StringUnkownRecord;
    setFormValue: (value: StringUnkownRecord) => Promise<void>;
    formValue: import('vue').ComputedRef<StringUnkownRecord>;
    presistForm: () => void;
    formValueString: import('vue').ComputedRef<string>;
    clearInput: (inputName: string) => Promise<void>;
    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
    refetchDropdownInput: (inputName: string) => Promise<void>;
    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
    resetForm: () => void;
    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
    clearForm: () => void;
    formOptions: AppFormOptions;
}, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
    initialFormValue: StringUnkownRecord;
    setFormValue: (value: StringUnkownRecord) => Promise<void>;
    formValue: import('vue').ComputedRef<StringUnkownRecord>;
    presistForm: () => void;
    formValueString: import('vue').ComputedRef<string>;
    clearInput: (inputName: string) => Promise<void>;
    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
    refetchDropdownInput: (inputName: string) => Promise<void>;
    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
    resetForm: () => void;
    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
    clearForm: () => void;
    formOptions: AppFormOptions;
}, "formValue" | "formValueString" | "activeInputs">, Pick<{
    initialFormValue: StringUnkownRecord;
    setFormValue: (value: StringUnkownRecord) => Promise<void>;
    formValue: import('vue').ComputedRef<StringUnkownRecord>;
    presistForm: () => void;
    formValueString: import('vue').ComputedRef<string>;
    clearInput: (inputName: string) => Promise<void>;
    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
    refetchDropdownInput: (inputName: string) => Promise<void>;
    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
    resetForm: () => void;
    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
    clearForm: () => void;
    formOptions: AppFormOptions;
}, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
export declare const useAppFormStoreWithProps: <TApi extends Record<string, Function>, TFormRequest extends StringUnkownRecord = StringUnkownRecord, TApiRequest extends StringUnkownRecord = StringUnkownRecord, TApiResponse extends StringUnkownRecord = StringUnkownRecord, TFindRequestPropName extends string = "recordId", TFindResponsePropName extends string = "request", TFindCallbakResponse = unknown, TCallbakResponse = unknown>(props: AppFormProps<TApi, TFormRequest, TApiRequest, TApiResponse, TFindRequestPropName, TFindResponsePropName, TFindCallbakResponse, TCallbakResponse>) => import('pinia').Store<string, Pick<{
    initialFormValue: StringUnkownRecord;
    setFormValue: (value: StringUnkownRecord) => Promise<void>;
    formValue: import('vue').ComputedRef<StringUnkownRecord>;
    presistForm: () => void;
    formValueString: import('vue').ComputedRef<string>;
    clearInput: (inputName: string) => Promise<void>;
    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
    refetchDropdownInput: (inputName: string) => Promise<void>;
    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
    resetForm: () => void;
    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
    clearForm: () => void;
    formOptions: AppFormOptions;
}, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
    initialFormValue: StringUnkownRecord;
    setFormValue: (value: StringUnkownRecord) => Promise<void>;
    formValue: import('vue').ComputedRef<StringUnkownRecord>;
    presistForm: () => void;
    formValueString: import('vue').ComputedRef<string>;
    clearInput: (inputName: string) => Promise<void>;
    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
    refetchDropdownInput: (inputName: string) => Promise<void>;
    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
    resetForm: () => void;
    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
    clearForm: () => void;
    formOptions: AppFormOptions;
}, "formValue" | "formValueString" | "activeInputs">, Pick<{
    initialFormValue: StringUnkownRecord;
    setFormValue: (value: StringUnkownRecord) => Promise<void>;
    formValue: import('vue').ComputedRef<StringUnkownRecord>;
    presistForm: () => void;
    formValueString: import('vue').ComputedRef<string>;
    clearInput: (inputName: string) => Promise<void>;
    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
    refetchDropdownInput: (inputName: string) => Promise<void>;
    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
    resetForm: () => void;
    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
    clearForm: () => void;
    formOptions: AppFormOptions;
}, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
export declare const useAppFormStoreWithKey: (formKey: string) => import('pinia').Store<string, Pick<{
    initialFormValue: StringUnkownRecord;
    setFormValue: (value: StringUnkownRecord) => Promise<void>;
    formValue: import('vue').ComputedRef<StringUnkownRecord>;
    presistForm: () => void;
    formValueString: import('vue').ComputedRef<string>;
    clearInput: (inputName: string) => Promise<void>;
    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
    refetchDropdownInput: (inputName: string) => Promise<void>;
    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
    resetForm: () => void;
    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
    clearForm: () => void;
    formOptions: AppFormOptions;
}, "initialFormValue" | "formElementNode" | "formElementContext" | "formOptions">, Pick<{
    initialFormValue: StringUnkownRecord;
    setFormValue: (value: StringUnkownRecord) => Promise<void>;
    formValue: import('vue').ComputedRef<StringUnkownRecord>;
    presistForm: () => void;
    formValueString: import('vue').ComputedRef<string>;
    clearInput: (inputName: string) => Promise<void>;
    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
    refetchDropdownInput: (inputName: string) => Promise<void>;
    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
    resetForm: () => void;
    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
    clearForm: () => void;
    formOptions: AppFormOptions;
}, "formValue" | "formValueString" | "activeInputs">, Pick<{
    initialFormValue: StringUnkownRecord;
    setFormValue: (value: StringUnkownRecord) => Promise<void>;
    formValue: import('vue').ComputedRef<StringUnkownRecord>;
    presistForm: () => void;
    formValueString: import('vue').ComputedRef<string>;
    clearInput: (inputName: string) => Promise<void>;
    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
    refetchDropdownInput: (inputName: string) => Promise<void>;
    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
    resetForm: () => void;
    formElementNode: import('vue').Ref<import('@formkit/core').FormKitNode<unknown> | undefined, import('@formkit/core').FormKitNode<unknown> | undefined>;
    formElementContext: import('vue').Ref<import('@formkit/core').FormKitFrameworkContext<any> | undefined, import('@formkit/core').FormKitFrameworkContext<any> | undefined>;
    debouncedRouteQueryAppend: import('@vueuse/core').PromisifyFn<(req: any) => void>;
    clearForm: () => void;
    formOptions: AppFormOptions;
}, "setFormValue" | "presistForm" | "clearInput" | "refetchDropdownInput" | "setInputValue" | "resetForm" | "debouncedRouteQueryAppend" | "clearForm">>;
